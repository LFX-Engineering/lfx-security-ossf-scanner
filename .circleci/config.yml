# Copyright The Linux Foundation and each contributor to LFX.
# SPDX-License-Identifier: MIT

version: 2.1

environment:
  BASH_ENV: ~/.bashrc

set_environment: &set_environment
  run:
    name: set deployment environment
    command: |
      cd && echo "Setting environment in $BASH_ENV for stage ${STAGE}" && touch $BASH_ENV

      # Note, we place single quotes around the values to ensure any values
      # with dollar signs are not intrepreted and expanded by accident
      # Default Test User (functional test)
      echo 'export AWS_ACCESS_KEY_ID=${!AWS_ACCESS_KEY_ID_ENV_VAR}' >> $BASH_ENV
      echo 'export AWS_SECRET_ACCESS_KEY=${!AWS_SECRET_ACCESS_KEY_ENV_VAR}' >> $BASH_ENV

      # The database connection details - set in the CI/CD pipeline environment
      echo 'export POSTGRESQL_CONNECTION=${!POSTGRESQL_CONNECTION_ENV_VAR}' >> $BASH_ENV
      # DATABASE_URL is used by dbmate to migrate the databases, for v2 we need to hit the bastian host to connect
      echo 'export DATABASE_URL=${!POSTGRESQL_CONNECTION_ENV_VAR}' >> $BASH_ENV

step-library:
  - &install-os-tools
    run:
      name: Install OS tools on Debian
      command: |
        set +e
        sudo apt update && sudo apt-get install file -y

jobs:
  deploy: &deploy_anchor
    docker:
      # See: https://circleci.com/developer/images/image/cimg/python
      # includes: build-essential 12.8ubuntu1.1, curl 7.68.0, docker 20.10.9, docker-compose 1.29.2, dockerize v0.6.1, git 2.33.0, java 11.0.11, jq 1.6, node 14.18.0, pip 21.2.3, pipenv 2021.5.29, poetry module, pyenv 2.1.0, python2 2.7.18, python3 3.10.0, selenium 3.141.59, ubuntu 20.04.3 LTS, virtualenv 20.8.1, wget 1.20.3, wheel 0.37.0, yarn 1.22.5
      - image: cimg/python:3.9.6-node
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "e9:13:85:f1:b1:a1:25:bf:f5:44:34:66:82:1e:31:59"
      - run: echo 'export NVM_DIR=${HOME}/.nvm' >> $BASH_ENV
      - *set_environment
      - *install-os-tools
      - run:
          name: Install Serverless Dependences
          command: |
            echo "Node version is: $(node --version)"
            echo "Yarn version is: $(yarn --version)"
            echo "Running top level install..."
            yarn install
      - run:
          name: Install Python Dependences
          command: |
            echo "Python version is: $(python --version)"
            pip install -r requirements.txt
      - run:
          name: Deploy
          command: |
            if [[ ! -f serverless.yml ]]; then echo "Missing serverless.yml file in $(pwd). Exiting..."; exit 1; fi
            yarn sls deploy --force --stage ${STAGE} --region us-east-2

  deploy_dev:
    <<: *deploy_anchor
    environment:
      AWS_REGION: us-east-2
      AWS_ACCESS_KEY_ID_ENV_VAR: AWS_ACCESS_KEY_ID_DEV
      AWS_SECRET_ACCESS_KEY_ENV_VAR: AWS_SECRET_ACCESS_KEY_DEV
      # The database connection details - set in the CI/CD pipeline
      POSTGRESQL_CONNECTION_ENV_VAR: POSTGRESQL_CONNECTION_DEV
      STAGE: dev

  deploy_staging:
    <<: *deploy_anchor
    environment:
      AWS_REGION: us-east-2
      AWS_ACCESS_KEY_ID_ENV_VAR: AWS_ACCESS_KEY_ID_STAGING
      AWS_SECRET_ACCESS_KEY_ENV_VAR: AWS_SECRET_ACCESS_KEY_STAGING
      # The database connection details - set in the CI/CD pipeline
      POSTGRESQL_CONNECTION_ENV_VAR: POSTGRESQL_CONNECTION_STAGING
      STAGE: staging

  deploy_prod:
    <<: *deploy_anchor
    environment:
      AWS_REGION: us-east-2
      AWS_ACCESS_KEY_ID_ENV_VAR: AWS_ACCESS_KEY_ID_PROD
      AWS_SECRET_ACCESS_KEY_ENV_VAR: AWS_SECRET_ACCESS_KEY_PROD
      # The database connection details - set in the CI/CD pipeline
      POSTGRESQL_CONNECTION_ENV_VAR: POSTGRESQL_CONNECTION_PROD
      STAGE: prod


workflows:
  deploy:
    jobs:
      - deploy_dev:
          filters:
            branches:
              only: main
            tags:
              ignore: /.*/

      - approve_staging:
          type: approval
          requires:
            - deploy_dev
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v\d+(\.\d+)?(\.\d+)?$/

      - deploy_staging:
          requires:
            - approve_staging
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v\d+(\.\d+)?(\.\d+)?$/

      - approve_prod:
          type: approval
          requires:
            - deploy_staging
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v\d+(\.\d+)?(\.\d+)?$/

      - deploy_prod:
          requires:
            - approve_prod
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v\d+(\.\d+)?(\.\d+)?$/
